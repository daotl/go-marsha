// Code generated by github.com/daotl/cbor-gen. DO NOT EDIT.

package test

import (
	"fmt"
	"io"
	"math"
	"sort"

	cbg "github.com/daotl/cbor-gen"
	cid "github.com/ipfs/go-cid"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *TestStruct) InitNilEmbeddedStruct() {
	if t != nil {
	}
}

var lengthBufTestStruct = []byte{129}

func (t *TestStruct) MarshalCBOR(w io.Writer) (n int, err error) {
	if t == nil {
		return w.Write(cbg.CborNull)
	}
	t.InitNilEmbeddedStruct()
	if n_, err := w.Write(lengthBufTestStruct); err != nil {
		return n_, err
	} else {
		n += n_
	}

	scratch := make([]byte, 9)

	// t.Data (string) (string)
	if len(t.Data) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.Data was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Data))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.Data)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	return n, nil
}

func (t *TestStruct) UnmarshalCBOR(r io.Reader) (int, error) {
	bytesRead := 0
	*t = TestStruct{}
	t.InitNilEmbeddedStruct()

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return bytesRead, fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Data (string) (string)

	{
		sval, read, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read

		t.Data = string(sval)
	}
	return bytesRead, nil
}

func (t *TestStruct2) InitNilEmbeddedStruct() {
	if t != nil {
	}
}

var lengthBufTestStruct2 = []byte{129}

func (t *TestStruct2) MarshalCBOR(w io.Writer) (n int, err error) {
	if t == nil {
		return w.Write(cbg.CborNull)
	}
	t.InitNilEmbeddedStruct()
	if n_, err := w.Write(lengthBufTestStruct2); err != nil {
		return n_, err
	} else {
		n += n_
	}

	scratch := make([]byte, 9)

	// t.Data2 (int64) (int64)
	if t.Data2 >= 0 {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Data2)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.Data2-1)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}
	return n, nil
}

func (t *TestStruct2) UnmarshalCBOR(r io.Reader) (int, error) {
	bytesRead := 0
	*t = TestStruct2{}
	t.InitNilEmbeddedStruct()

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return bytesRead, fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Data2 (int64) (int64)
	{
		maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return bytesRead, fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.Data2 = int64(extraI)
	}
	return bytesRead, nil
}
